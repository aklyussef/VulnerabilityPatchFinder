import os
import shutil

class IOHelper:

    def __init__(self):
        self.dir = os.getcwd()
        self.dir = os.path.join(self.dir,'repos')
        self.outdir = ""

    def getreposfromFile(self,filepath):
        print("Reading repo input file: {}".format(filepath))
        repolist = []
        if ( not os.path.exists(filepath)):
            print("File {} doesn't exist".format(filepath))
            exit(1)
        file = open(filepath,'r')
        filelines = file.readlines()
        for line in filelines:
            line = line.strip()
            if line.startswith('http') and line.endswith('.git'):
                if line not in repolist:
                    repolist.append(line)
            else:
                print("{} does not look like a repo...please check for next run".format(line))
        file.close()
        return repolist

    def getCurrentDirectory(self):
        return self.dir

    def getDirName(self, repoURL):
        #get url after https://github.com/
        url = repoURL.replace('.git','')
        urlParts = url.split('/')
        self.projectName = urlParts[-1]
        outdir = os.path.join(self.dir,self.projectName)
        return outdir

    def createRepoDirectory(self, outdir):
        #create dir for repo
        if((os.path.exists(outdir))):
            print("Directory already exists")
            return outdir
            #shutil.rmtree(outdir)
        print("Making Directory {}".format(outdir))
        os.makedirs(outdir)
        return outdir

    def createOutputDirectory(self):
        self.outdir = os.path.join(self.dir,"output")
        if (not (os.path.exists(self.outdir))):
            print("Creating output file directory")
            os.makedirs(self.outdir)
        return self.outdir

    def write_output_headers(self):
        self.writeOutputHeader()
        self.write_report_header()

    def writeOutputHeader(self):
        self.createOutputDirectory()
        outfilePath = os.path.join(self.outdir,"scan_summary.csv")
        if( os.path.exists(outfilePath)):
            os.remove(outfilePath)
        self.outfile = open(outfilePath,'w+')
        self.outfile.write("Project Name, Repository, Commit ID, CVE ID, CVE Details\n")
        return

    def write_report_header(self):
        self.createOutputDirectory()
        outfilePath = os.path.join(self.outdir,"scan_report.txt")
        if( os.path.exists(outfilePath)):
            os.remove(outfilePath)
        self.reportfile= open(outfilePath,'w+')
        self.reportfile.write("+{}SCAN SUMMARY REPORT{}+\n\n".format('='*30,'='*30))
        return

    #call first with repo_name then with key values to print to file
    def write_report_line(self,*args):
        # no args prints a line
        write_string = ""
        if len(args) == 0:
            write_string = "<{}>\n\n".format('-'*81)
        # even argument count print key value pair
        elif len(args) % 2 == 0:
            count = 0
            for string in args:
                if count % 2 == 0 :
                    write_string = write_string + "{:<25} {}> ".format(string ,'-'*20)
                else:
                    write_string = write_string + "{:25}\n".format(string)
                count = count + 1
        else:
            for string in args:
                write_string = write_string + "{:<25} ".format(string)
            write_string = write_string + '\n'
        self.reportfile.write(write_string)
        return


    def writeRepoFinds(self, resultList):
        print("Writing to output file...")
        if(len(resultList) == 0):
            return
        for key in resultList:
            self.outfile.write("{},{},{},{},,\n".format(
                self.projectName,resultList[key][0],key,resultList[key][1]))
        return

    def writeCVEentry(self,proj_url,commit,cve_entry):
        self.outfile.write("{},{},{},{},,\n".format(
            self.projectName,proj_url,commit,cve_entry))
        return


    def free_resources(self):
        self.outfile.close()
        self.reportfile.close()


def main():
    print("Welcome to IOHelper Main")
    for i in range(1,10):
        print("i is: {}".format(i))
        for j in range(3,10):
            if(i == 3):
                break
            print("\tj is: {}".format(j))
    return
    m = IOHelper()
    print(m.createRepoDirectory(m.getCurrentDirectory(), r'https://github.com/aklyussef/VulnerableRepoTest.git'))

if __name__ == '__main__':
    main()