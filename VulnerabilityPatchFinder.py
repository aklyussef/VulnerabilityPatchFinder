import sys
from IOHelper import IOHelper
from GitHelper import GitHelper
import time


def main():

    if (len(sys.argv) != 2):
        print("USAGE: {} path/to/git/repo/file/toscan".format(sys.argv[0].split('/')[-1]))
        return

    IOhelper = IOHelper()

    repoList = IOhelper.getreposfromFile(sys.argv[1])
    IOhelper.createOutputDirectory()
    IOhelper.write_output_headers()

    script_start_t = time.time()
    for repoURL in repoList:
        print("Preparing to scan repo {}".format(repoURL))
        IOhelper.write_report_line(repoURL)
        outDirName = IOhelper.getDirName(repoURL)
        gitHelper = GitHelper(repoURL)
        print("Creating necessary dirs")
        IOhelper.createRepoDirectory(outDirName)
        cloning_start_t = time.time()
        if not gitHelper.isgitRepo(outDirName):
            gitHelper.cloneRepo(outDirName)
        else:
            # force fetch all from repo to ensure working with latest
            gitHelper.fetch_all()
        cloning_end_t = time.time()
        IOhelper.write_report_line("REPO CLONING TIME: ", "{}s".format(cloning_end_t-cloning_start_t))
        scanning_start_t = time.time()
        gitHelper.findFixCommits(IOhelper.writeCVEentry,IOhelper.write_report_line)
        scanning_end_t = time.time()
        IOhelper.write_report_line("REPO SCANNING TIME", "{}s".format(scanning_end_t-scanning_start_t))
        IOhelper.write_report_line("REPO TOTAL TIME", "{}s".format(scanning_end_t - cloning_start_t))
        IOhelper.write_report_line()
    script_end_t = time.time()
    IOhelper.write_report_line("SCRIPT TOTAL TIME", "{}s".format(script_end_t - script_start_t))
    IOhelper.free_resources()


if __name__ == '__main__':
    main()