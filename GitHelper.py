import git
import re

class GitHelper:

    def __init__(self,repoURL):
        self.repoURL = repoURL
        self.regex = 'CVE-[0-9]+-[0-9]+'
        self.p = re.compile(self.regex)
        # self.repo = Repo(self.repoURL)
        # assert not self.repo.bare

    #TODO: Check if repo already exists in dir, if so try using it without delete
    def cloneRepo(self,dir):
        # repo = git.Repo.clone_from(self.repoURL, os.path.join(dir, 'repo'), branch='master')
        print("Cloning git repo {} into {}".format(self.repoURL,dir))
        self.repo = git.Repo.clone_from(self.repoURL,dir)
        print("Finished cloning repo")
        return

    # Identify whether or not a commit is a merge commit
    def isMerge(self,commit):
        return True if len(commit.parents) > 1 else False

    # Check if git repository in dir to avoid cloning
    def isgitRepo(self,dir):
        print('Checking if {} is a git repo'.format(dir))
        try:
            _ = git.Repo(dir).git_dir
            self.repo = git.Repo(dir)
            print("Using existing repo in {}".format(dir))
            return True
        except git.exc.InvalidGitRepositoryError:
            return False

    def fetch_all(self):
        print("Fetching all from repo {}".format(self.repoURL))
        for remote in self.repo.remotes:
            remote.fetch()

    # TODO: when head of branch is branching off of main then iter_commits extends to main
    # TODO: might be able to use this for optimization
    # TODO: run timer on scanning httpd and include optimization where you only check commits on current branch
    # TODO: since runtime is too long for one repo.
    # TODO: Create ccommits checked / branch for scan report & time?
    def findFixCommits(self,result_write_func,report_write_func):
        seen_commits = set()
        commits_checked = 0
        cve_entries_found = 0
        # loop head through all commits in branch
        # if message matches 'CVE-[0-9]+-[0-9]+'
        # print to out_file
        # print("Identified {} branches: {}".format(len(self.repo.heads),self.repo.heads))
        for branch in self.repo.heads:
            # print("Checking out branch {}".format(branch))
            self.repo.git.checkout(branch)
            for commit in self.repo.iter_commits(branch):
                # If we've seen the commit before we've either
                # 1. Already traversed branch since it's merged to master
                # 2 Hit a commit of a branch we've already traversed as we explore parents
                commitHash = commit.hexsha
                if commitHash in seen_commits:
                    break
                if (self.p.search(commit.message) is not None and not self.isMerge(commit)):
                    print("Commit flagged")
                    cve_entries_found = cve_entries_found + 1
                    result_write_func(self.repoURL,commitHash,self.p.search(commit.message).group(0))
                commits_checked = commits_checked + 1
                seen_commits.add(commitHash)
            print("Checked {} commits".format(commits_checked))
        report_write_func("CHECKED COMMITS", "{}".format(commits_checked))
        report_write_func("CVE ENTRIES FOUND", "{}".format(cve_entries_found))
        return


def main():
    print("Welcome to GitHelper Main")
    testURL = r'https://github.com/mozilla/gecko-dev'
    print("It doesn't break!")

if __name__ == '__main__':
    main()