import git
import re
import random
from unidiff import PatchSet

class GitHelper:

    def __init__(self,repoURL):
        self.repoURL = repoURL
        self.regex = 'CVE-[0-9]+-[0-9]+'
        self.p = re.compile(self.regex)
        # self.repo = Repo(self.repoURL)
        # assert not self.repo.bare

    #TODO: Check if repo already exists in dir, if so try using it without delete
    def cloneRepo(self,dir):
        # repo = git.Repo.clone_from(self.repoURL, os.path.join(dir, 'repo'), branch='master')
        print("Cloning git repo {} into {}".format(self.repoURL,dir))
        self.repo = git.Repo.clone_from(self.repoURL,dir)
        print("Finished cloning repo")
        return

    # Identify whether or not a commit is a merge commit
    def isMerge(self,commit):
        return True if len(commit.parents) > 1 else False

    # Check if git repository in dir to avoid cloning
    def isgitRepo(self,dir):
        print('Checking if {} is a git repo'.format(dir))
        try:
            _ = git.Repo(dir).git_dir
            self.repo = git.Repo(dir)
            print("Using existing repo in {}".format(dir))
            return True
        except git.exc.InvalidGitRepositoryError:
            return False

    def fetch_all(self):
        print("Fetching all from repo {}".format(self.repoURL))
        for remote in self.repo.remotes:
            remote.fetch()

    # Look through repository, collect CVE commits &
    # random commits that are not vulnerability fixes
    def mine_repo(self, result_write_func, report_write_func,capture_non_vuln_commit):
        seen_commits = set()
        commits_checked = 0
        cve_entries_found = 0
        # if message matches 'CVE-[0-9]+-[0-9]+'
        # print to out_file
        for branch in self.repo.heads:
            self.repo.git.checkout(branch)
            for commit in self.repo.iter_commits(branch):
                # If we've seen the commit before we've either
                # 1. Already traversed branch since it's merged to master
                # 2 Hit a commit of a branch we've already traversed as we explore parents
                commitHash = commit.hexsha
                vulnerable_commit = False

                if commitHash in seen_commits:
                    break
                if (self.p.search(commit.message) is not None and not self.isMerge(commit)):
                    print("Commit flagged")
                    vulnerable_commit = True
                    # Git Diff info
                    (added,removed,Fmodified) = self.get_diff_info(commit)
                    result_write_func(self.repoURL,commitHash,self.p.search(commit.message).group(0),Fmodified,added,removed)
                    cve_entries_found = cve_entries_found + 1

                if(not vulnerable_commit and random.randint(1,10) < 3):
                    # Git Diff info
                    (added,removed,Fmodified) = self.get_diff_info(commit)
                    capture_non_vuln_commit(self.repoURL,commit.hexsha,Fmodified,added,removed)
                commits_checked = commits_checked + 1
                seen_commits.add(commitHash)
            print("Checked {} commits".format(commits_checked))
        report_write_func("CHECKED COMMITS", "{}".format(commits_checked))
        report_write_func("CVE ENTRIES FOUND", "{}".format(cve_entries_found))
        return

    #return number of added lines, number of deleted lines, number of files modified, names of files modified?
    def get_diff_info(self, commit):
        diffString = self.repo.git.diff(commit.parents[0].hexsha, commit.hexsha)
        patch = PatchSet.from_string(diffString)
        return (str(patch.added),str(patch.removed),str(len(patch.modified_files)))

def main():
    print("Welcome to GitHelper Main")
    testURL = r'https://github.com/mozilla/gecko-dev'
    print("It doesn't break!")

if __name__ == '__main__':
    main()