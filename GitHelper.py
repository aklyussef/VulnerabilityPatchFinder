import git
import re

class GitHelper:

    def __init__(self,repoURL):
        self.repoURL = repoURL
        self.regex = 'CVE-[0-9]+-[0-9]+'
        self.p = re.compile(self.regex)
        # self.repo = Repo(self.repoURL)
        # assert not self.repo.bare

    def cloneRepo(self,dir):
        # repo = git.Repo.clone_from(self.repoURL, os.path.join(dir, 'repo'), branch='master')
        self.repo = git.Repo.clone_from(self.repoURL,dir)
        return

    def isMerge(self,commit):
        return True if len(commit.parents) > 1 else False

    # TODO: when head of branch is branching off of main then iter_commits extends to main
    # TODO: might be able to use this for optimization
    def findFixCommits(self):
        result_list = {}
        # loop head through all commits in branch
        # if message matches 'CVE-[0-9]+-[0-9]+'
        # Add commit,repo.head.commit.hexsha,matched CVE string to result list & return after done all branches
        branches = self.getGitBranches()
        for branch in branches:
            self.repo.git.checkout(branch)
            for commit in self.repo.iter_commits(branch):
                if (self.p.search(commit.message) is not None and commit.hexsha not in result_list and not self.isMerge(commit)):
                    result_list[commit.hexsha] = [ self.repoURL,self.p.search(commit.message).group(0)]
        return result_list

    def getGitBranches(self):
        branches = []
        i = 0
        branchString = self.repo.git.branch('-a')
        branchString = branchString.replace('*','')
        branch_lines = branchString.split('\n')
        for b_line in branch_lines:
            b_line = b_line.strip()
            parts = b_line.split('/')
            if( parts[-1] not in branches):
                branches.append(parts[-1])
        if(len(branches) == 0):
            print("Could not find any branches to check... Exitting")
            exit(1)
        return branches


def main():
    print("Welcome to GitHelper Main")
    testURL = r'https://github.com/aklyussef/VulnerableRepoTest.git'
    localRepoPath = r'/Users/aklyussef/Projects/Python/EventAutomator'
    gHelper = GitHelper(testURL)
    gHelper.cloneRepo(r'/Users/aklyussef/Projects/Python/VulnerabilityPatchFinder/aklyussef-VulnerableRepoTest')
    print("It doesn't break!")

if __name__ == '__main__':
    main()